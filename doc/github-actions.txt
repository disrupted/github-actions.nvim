*github-actions.txt*       For NVIM v0.8.0       Last change: 2025 February 17

==============================================================================
Table of Contents                           *github-actions-table-of-contents*

1. github-actions.nvim                    |github-actions-github-actions.nvim|
  - Features                     |github-actions-github-actions.nvim-features|
  - Installation             |github-actions-github-actions.nvim-installation|
  - Configuration           |github-actions-github-actions.nvim-configuration|

==============================================================================
1. github-actions.nvim                    *github-actions-github-actions.nvim*

Neovim plugin for GitHub Actions.


FEATURES                         *github-actions-github-actions.nvim-features*

- configure LSP for GitHub Actions.
- custom Treesitter parser for GitHub Actions syntax.


INSTALLATION                 *github-actions-github-actions.nvim-installation*

example using Lazy <https://github.com/folke/lazy.nvim> plugin manager

>lua
    {
        'disrupted/github-actions.nvim',
        dependencies = {
            'nvim-treesitter/nvim-treesitter',
            'williamboman/mason.nvim', -- optional
        },
        ft = 'yaml.github',
        ---@module 'github-actions.config'
        ---@type github_actions.Opts
        opts = {},
    }
<


CONFIGURATION               *github-actions-github-actions.nvim-configuration*


TOKEN PROVIDER ~

Some language server features require a GitHub access token.

The default token provider retrieves it from the `gh` CLI. Make sure it’s
installed and authenticated (check `gh auth status`).

If you want to retrieve it from a different CLI, such as a password mananger,
you can override the token provider.

Here’s an example for `op` (1Password CLI):

>lua
    opts = {
      token_provider = function(callback)
        require('github-actions.lsp.token_provider').system({
          'op',
          'read',
          'op://Work/GitHub/Access Token/xg7h2j4k9m1qv8z3r5w8n2p6s0',
        }, callback)
      end,
    }
<

You can also define a custom token provider function, e.g. to retrieve it from
the environment.

>lua
    opts = {
      token_provider = function(callback)
        callback(vim.env.GITHUB_TOKEN)
      end,
    }
<

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
